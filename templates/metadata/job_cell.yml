job_types:
  - name: cell_z1
    resource_label: Cell AZ1
    templates:
      # ship all the logs
      - {name: remote-syslog, release: simple-remote-syslog}
      # run docker daemon
      - {name: docker, release: patroni-docker}
      # run registrator daemon
      - {name: registrator, release: patroni-docker}
      # docker images will be pulled down
      - {name: upstream-images, release: patroni-docker}
      # create uuid for each broker/daemon
      - {name: container-env-vars, release: patroni-docker}
      # run service broker
      - {name: cf-containers-broker, release: patroni-docker}
    static_ip: 1
    dynamic_ip: 0
    max_in_flight: 500
    resource_definitions:
      - name: ram
        type: integer
        configurable: true
        default: 4096
        constraints:
          min: 1024
      - name: ephemeral_disk
        type: integer
        configurable: true
        default: 102400
        constraints:
          min: 10240
      - name: persistent_disk
        type: integer
        configurable: true
        default: 102400
        constraints:
          min: 10240
      - name: cpu
        type: integer
        configurable: true
        default: 4
    instance_definitions:
      - name: instances
        type: integer
        configurable: true
        default: 1
    property_blueprints:
      - name: vm_credentials
        type: salted_credentials
        default:
          identity: vcap
    manifest: |
      remote_syslog:
        address: (( .properties.syslog_address.value ))
        port: (( .properties.syslog_port.value ))
        short_hostname: true
      docker:
        log_driver: syslog
        log_options:
        - syslog-address=udp://(( .properties.syslog_address.value )):(( .properties.syslog_port.value ))
        - tag="{{.Name}}"
      etcd:
        machines: (( .etcd.ips ))
      registrator:
        backend_uri: etcd://(( .etcd.first_ip )):4001
      cf:
        api_url: (( $runtime.system_api_url ))
      broker:
        cookie_secret: (( .properties.cookie_secret.value ))
        fetch_images: true
        max_containers: 20
        username: (( .properties.backend_broker_username.value ))
        password: (( .properties.backend_broker_password.value ))
        host: cf-containers-broker.10.244.0.34.xip.io
        port: 80
        ssl_enabled: true
        protocol: https
        services:
        - name: postgresql95
          description: Solo instance of PostgreSQL 9.5
          id: (( .properties.service_uuid.value ))
          bindable: true
          metadata:
            displayName: postgresql 9.5
            documentationUrl: https://pg.dingotiles.com
            longDescription: Solo instance of PostgreSQL 9.5
            providerDisplayName: Dingo Tiles
            supportUrl: https://slack.dingotiles.com
          tags: [postgresql95, postgresql]
          plans:
          - name: solo
            id: (( .properties.solo_service_plan_uuid.value ))
            description: Solo instance of PostgreSQL
            metadata: {displayName: Solo}
            container:
              backend: docker
              image: cfcommunity/postgresql-patroni
              persistent_volumes:
              - /data
              tag: "9.5"
              environment:
              - ETCD_HOST_PORT=(( .etcd.first_ip )):4001
              - WALE_ENV_DIR=/data/wal-e/env
              - WALE_BACKUP_THRESHOLD_PERCENTAGE=30
              - WALE_BACKUP_THRESHOLD_MEGABYTES=10240
              - AWS_ACCESS_KEY_ID=(( .properties.aws_access_key.value ))
              - AWS_SECRET_ACCESS_KEY=(( .properties.aws_secret_key.value ))
              - WAL_S3_BUCKET=(( .properties.s3_bucket.value ))
              - WALE_S3_ENDPOINT=https+path://(( .properties.s3_endpoint.value ))
